<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protocol.proto

namespace Attrace\Connector\Protocol\Core;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * BlockHeader contains all block metadata to allow verification
 * Header is sent once block is completed and confirms a fully generated block (who's chunks have already been broadcasted)
 *
 * Generated from protobuf message <code>attrace.connector.protocol.core.BlockHeader</code>
 */
class BlockHeader extends \Google\Protobuf\Internal\Message
{
    /**
     * Ever-increasing number of this block in the chain.
     *
     * Generated from protobuf field <code>uint64 Sequence = 1;</code>
     */
    protected $Sequence = 0;
    /**
     * Timestamp millis this block was generated
     *
     * Generated from protobuf field <code>uint64 Timestamp = 2;</code>
     */
    protected $Timestamp = 0;
    /**
     * Address of the witness that generated this block.
     *
     * Generated from protobuf field <code>bytes Witness = 3;</code>
     */
    protected $Witness = '';
    /**
     * Hash of this block
     * hash(sequence, timestamp, parentHash, merkleRoot, producer)
     *
     * Generated from protobuf field <code>bytes Hash = 4;</code>
     */
    protected $Hash = '';
    /**
     * Hash of the previous block.
     *
     * Generated from protobuf field <code>bytes PreviousHash = 5;</code>
     */
    protected $PreviousHash = '';
    /**
     * Merke root of transactions and signatures.
     *
     * Generated from protobuf field <code>bytes MerkleRoot = 6;</code>
     */
    protected $MerkleRoot = '';
    /**
     * Signature by the producer of this block.
     * sign(append(sequence, timestamp, parentHash, hash, merkleRoot, producer))
     *
     * Generated from protobuf field <code>bytes Signature = 7;</code>
     */
    protected $Signature = '';
    /**
     * Total amount of fees collected for processing the embedded transactions
     *
     * Generated from protobuf field <code>bytes Fees = 8;</code>
     */
    protected $Fees = '';
    /**
     * Merkle root after processing the receipts
     *
     * Generated from protobuf field <code>bytes ReceiptsRoot = 9;</code>
     */
    protected $ReceiptsRoot = '';
    /**
     * Merkle root of the annotation info we share with the other witnesses.
     * Before committing to a block, witnesses need the annotations to validate the block.
     * It's useful for storing and verifying volatile data, like failed transactions.
     * When they are syncing (and thus not voting for), it's not required for witnesses to validate this (since the info might already be flushed from the network).
     *
     * Generated from protobuf field <code>bytes AnnotationsRoot = 10;</code>
     */
    protected $AnnotationsRoot = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $Sequence
     *           Ever-increasing number of this block in the chain.
     *     @type int|string $Timestamp
     *           Timestamp millis this block was generated
     *     @type string $Witness
     *           Address of the witness that generated this block.
     *     @type string $Hash
     *           Hash of this block
     *           hash(sequence, timestamp, parentHash, merkleRoot, producer)
     *     @type string $PreviousHash
     *           Hash of the previous block.
     *     @type string $MerkleRoot
     *           Merke root of transactions and signatures.
     *     @type string $Signature
     *           Signature by the producer of this block.
     *           sign(append(sequence, timestamp, parentHash, hash, merkleRoot, producer))
     *     @type string $Fees
     *           Total amount of fees collected for processing the embedded transactions
     *     @type string $ReceiptsRoot
     *           Merkle root after processing the receipts
     *     @type string $AnnotationsRoot
     *           Merkle root of the annotation info we share with the other witnesses.
     *           Before committing to a block, witnesses need the annotations to validate the block.
     *           It's useful for storing and verifying volatile data, like failed transactions.
     *           When they are syncing (and thus not voting for), it's not required for witnesses to validate this (since the info might already be flushed from the network).
     * }
     */
    public function __construct($data = NULL) {
        \Attrace\Connector\Protocol\GPBMetadata\Protocol::initOnce();
        parent::__construct($data);
    }

    /**
     * Ever-increasing number of this block in the chain.
     *
     * Generated from protobuf field <code>uint64 Sequence = 1;</code>
     * @return int|string
     */
    public function getSequence()
    {
        return $this->Sequence;
    }

    /**
     * Ever-increasing number of this block in the chain.
     *
     * Generated from protobuf field <code>uint64 Sequence = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSequence($var)
    {
        GPBUtil::checkUint64($var);
        $this->Sequence = $var;

        return $this;
    }

    /**
     * Timestamp millis this block was generated
     *
     * Generated from protobuf field <code>uint64 Timestamp = 2;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->Timestamp;
    }

    /**
     * Timestamp millis this block was generated
     *
     * Generated from protobuf field <code>uint64 Timestamp = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->Timestamp = $var;

        return $this;
    }

    /**
     * Address of the witness that generated this block.
     *
     * Generated from protobuf field <code>bytes Witness = 3;</code>
     * @return string
     */
    public function getWitness()
    {
        return $this->Witness;
    }

    /**
     * Address of the witness that generated this block.
     *
     * Generated from protobuf field <code>bytes Witness = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setWitness($var)
    {
        GPBUtil::checkString($var, False);
        $this->Witness = $var;

        return $this;
    }

    /**
     * Hash of this block
     * hash(sequence, timestamp, parentHash, merkleRoot, producer)
     *
     * Generated from protobuf field <code>bytes Hash = 4;</code>
     * @return string
     */
    public function getHash()
    {
        return $this->Hash;
    }

    /**
     * Hash of this block
     * hash(sequence, timestamp, parentHash, merkleRoot, producer)
     *
     * Generated from protobuf field <code>bytes Hash = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->Hash = $var;

        return $this;
    }

    /**
     * Hash of the previous block.
     *
     * Generated from protobuf field <code>bytes PreviousHash = 5;</code>
     * @return string
     */
    public function getPreviousHash()
    {
        return $this->PreviousHash;
    }

    /**
     * Hash of the previous block.
     *
     * Generated from protobuf field <code>bytes PreviousHash = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setPreviousHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->PreviousHash = $var;

        return $this;
    }

    /**
     * Merke root of transactions and signatures.
     *
     * Generated from protobuf field <code>bytes MerkleRoot = 6;</code>
     * @return string
     */
    public function getMerkleRoot()
    {
        return $this->MerkleRoot;
    }

    /**
     * Merke root of transactions and signatures.
     *
     * Generated from protobuf field <code>bytes MerkleRoot = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setMerkleRoot($var)
    {
        GPBUtil::checkString($var, False);
        $this->MerkleRoot = $var;

        return $this;
    }

    /**
     * Signature by the producer of this block.
     * sign(append(sequence, timestamp, parentHash, hash, merkleRoot, producer))
     *
     * Generated from protobuf field <code>bytes Signature = 7;</code>
     * @return string
     */
    public function getSignature()
    {
        return $this->Signature;
    }

    /**
     * Signature by the producer of this block.
     * sign(append(sequence, timestamp, parentHash, hash, merkleRoot, producer))
     *
     * Generated from protobuf field <code>bytes Signature = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkString($var, False);
        $this->Signature = $var;

        return $this;
    }

    /**
     * Total amount of fees collected for processing the embedded transactions
     *
     * Generated from protobuf field <code>bytes Fees = 8;</code>
     * @return string
     */
    public function getFees()
    {
        return $this->Fees;
    }

    /**
     * Total amount of fees collected for processing the embedded transactions
     *
     * Generated from protobuf field <code>bytes Fees = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setFees($var)
    {
        GPBUtil::checkString($var, False);
        $this->Fees = $var;

        return $this;
    }

    /**
     * Merkle root after processing the receipts
     *
     * Generated from protobuf field <code>bytes ReceiptsRoot = 9;</code>
     * @return string
     */
    public function getReceiptsRoot()
    {
        return $this->ReceiptsRoot;
    }

    /**
     * Merkle root after processing the receipts
     *
     * Generated from protobuf field <code>bytes ReceiptsRoot = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setReceiptsRoot($var)
    {
        GPBUtil::checkString($var, False);
        $this->ReceiptsRoot = $var;

        return $this;
    }

    /**
     * Merkle root of the annotation info we share with the other witnesses.
     * Before committing to a block, witnesses need the annotations to validate the block.
     * It's useful for storing and verifying volatile data, like failed transactions.
     * When they are syncing (and thus not voting for), it's not required for witnesses to validate this (since the info might already be flushed from the network).
     *
     * Generated from protobuf field <code>bytes AnnotationsRoot = 10;</code>
     * @return string
     */
    public function getAnnotationsRoot()
    {
        return $this->AnnotationsRoot;
    }

    /**
     * Merkle root of the annotation info we share with the other witnesses.
     * Before committing to a block, witnesses need the annotations to validate the block.
     * It's useful for storing and verifying volatile data, like failed transactions.
     * When they are syncing (and thus not voting for), it's not required for witnesses to validate this (since the info might already be flushed from the network).
     *
     * Generated from protobuf field <code>bytes AnnotationsRoot = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setAnnotationsRoot($var)
    {
        GPBUtil::checkString($var, False);
        $this->AnnotationsRoot = $var;

        return $this;
    }

}

