<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protocol.proto

namespace Attrace\Connector\Protocol\Core;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * ViewChange = node requesting to change producer
 * ViewChanges are alive and only valid for a short time, so no need to store them.
 *
 * Generated from protobuf message <code>attrace.connector.protocol.core.ViewChange</code>
 */
class ViewChange extends \Google\Protobuf\Internal\Message
{
    /**
     * Ever increasing number -- gaps can exist on the network of this when producers are down during re-election.
     *
     * Generated from protobuf field <code>uint64 NewViewID = 1;</code>
     */
    protected $NewViewID = 0;
    /**
     * What node should produce next according to this witness
     *
     * Generated from protobuf field <code>bytes Producer = 2;</code>
     */
    protected $Producer = '';
    /**
     * What node should validate next according to this witness
     *
     * Generated from protobuf field <code>bytes Validator = 3;</code>
     */
    protected $Validator = '';
    /**
     * Hash of the last committed block we have
     * This allows to verify that the new view is correct and relevant
     *
     * Generated from protobuf field <code>bytes LastBlock = 4;</code>
     */
    protected $LastBlock = '';
    /**
     * Nr of blocks planned to be generated by this witness
     *
     * Generated from protobuf field <code>uint32 ProduceAmount = 5;</code>
     */
    protected $ProduceAmount = 0;
    /**
     * Proof that 2f+1 of the network is committed to this point
     * TODO add commit proofs to genesis block generation
     *
     * Generated from protobuf field <code>repeated .attrace.connector.protocol.core.Commit LastBlockProofCommits = 6;</code>
     */
    private $LastBlockProofCommits;
    /**
     * Address of witness who has voted for this
     *
     * Generated from protobuf field <code>bytes Witness = 7;</code>
     */
    protected $Witness = '';
    /**
     * Used by the view change algorithm to calculate network-relevant view change time offset
     *
     * Generated from protobuf field <code>uint64 Timestamp = 8;</code>
     */
    protected $Timestamp = 0;
    /**
     * Sig of this msg
     *
     * Generated from protobuf field <code>bytes Signature = 9;</code>
     */
    protected $Signature = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $NewViewID
     *           Ever increasing number -- gaps can exist on the network of this when producers are down during re-election.
     *     @type string $Producer
     *           What node should produce next according to this witness
     *     @type string $Validator
     *           What node should validate next according to this witness
     *     @type string $LastBlock
     *           Hash of the last committed block we have
     *           This allows to verify that the new view is correct and relevant
     *     @type int $ProduceAmount
     *           Nr of blocks planned to be generated by this witness
     *     @type \Attrace\Connector\Protocol\Core\Commit[]|\Google\Protobuf\Internal\RepeatedField $LastBlockProofCommits
     *           Proof that 2f+1 of the network is committed to this point
     *           TODO add commit proofs to genesis block generation
     *     @type string $Witness
     *           Address of witness who has voted for this
     *     @type int|string $Timestamp
     *           Used by the view change algorithm to calculate network-relevant view change time offset
     *     @type string $Signature
     *           Sig of this msg
     * }
     */
    public function __construct($data = NULL) {
        \Attrace\Connector\Protocol\GPBMetadata\Protocol::initOnce();
        parent::__construct($data);
    }

    /**
     * Ever increasing number -- gaps can exist on the network of this when producers are down during re-election.
     *
     * Generated from protobuf field <code>uint64 NewViewID = 1;</code>
     * @return int|string
     */
    public function getNewViewID()
    {
        return $this->NewViewID;
    }

    /**
     * Ever increasing number -- gaps can exist on the network of this when producers are down during re-election.
     *
     * Generated from protobuf field <code>uint64 NewViewID = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNewViewID($var)
    {
        GPBUtil::checkUint64($var);
        $this->NewViewID = $var;

        return $this;
    }

    /**
     * What node should produce next according to this witness
     *
     * Generated from protobuf field <code>bytes Producer = 2;</code>
     * @return string
     */
    public function getProducer()
    {
        return $this->Producer;
    }

    /**
     * What node should produce next according to this witness
     *
     * Generated from protobuf field <code>bytes Producer = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setProducer($var)
    {
        GPBUtil::checkString($var, False);
        $this->Producer = $var;

        return $this;
    }

    /**
     * What node should validate next according to this witness
     *
     * Generated from protobuf field <code>bytes Validator = 3;</code>
     * @return string
     */
    public function getValidator()
    {
        return $this->Validator;
    }

    /**
     * What node should validate next according to this witness
     *
     * Generated from protobuf field <code>bytes Validator = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setValidator($var)
    {
        GPBUtil::checkString($var, False);
        $this->Validator = $var;

        return $this;
    }

    /**
     * Hash of the last committed block we have
     * This allows to verify that the new view is correct and relevant
     *
     * Generated from protobuf field <code>bytes LastBlock = 4;</code>
     * @return string
     */
    public function getLastBlock()
    {
        return $this->LastBlock;
    }

    /**
     * Hash of the last committed block we have
     * This allows to verify that the new view is correct and relevant
     *
     * Generated from protobuf field <code>bytes LastBlock = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setLastBlock($var)
    {
        GPBUtil::checkString($var, False);
        $this->LastBlock = $var;

        return $this;
    }

    /**
     * Nr of blocks planned to be generated by this witness
     *
     * Generated from protobuf field <code>uint32 ProduceAmount = 5;</code>
     * @return int
     */
    public function getProduceAmount()
    {
        return $this->ProduceAmount;
    }

    /**
     * Nr of blocks planned to be generated by this witness
     *
     * Generated from protobuf field <code>uint32 ProduceAmount = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setProduceAmount($var)
    {
        GPBUtil::checkUint32($var);
        $this->ProduceAmount = $var;

        return $this;
    }

    /**
     * Proof that 2f+1 of the network is committed to this point
     * TODO add commit proofs to genesis block generation
     *
     * Generated from protobuf field <code>repeated .attrace.connector.protocol.core.Commit LastBlockProofCommits = 6;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getLastBlockProofCommits()
    {
        return $this->LastBlockProofCommits;
    }

    /**
     * Proof that 2f+1 of the network is committed to this point
     * TODO add commit proofs to genesis block generation
     *
     * Generated from protobuf field <code>repeated .attrace.connector.protocol.core.Commit LastBlockProofCommits = 6;</code>
     * @param \Attrace\Connector\Protocol\Core\Commit[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setLastBlockProofCommits($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Attrace\Connector\Protocol\Core\Commit::class);
        $this->LastBlockProofCommits = $arr;

        return $this;
    }

    /**
     * Address of witness who has voted for this
     *
     * Generated from protobuf field <code>bytes Witness = 7;</code>
     * @return string
     */
    public function getWitness()
    {
        return $this->Witness;
    }

    /**
     * Address of witness who has voted for this
     *
     * Generated from protobuf field <code>bytes Witness = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setWitness($var)
    {
        GPBUtil::checkString($var, False);
        $this->Witness = $var;

        return $this;
    }

    /**
     * Used by the view change algorithm to calculate network-relevant view change time offset
     *
     * Generated from protobuf field <code>uint64 Timestamp = 8;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->Timestamp;
    }

    /**
     * Used by the view change algorithm to calculate network-relevant view change time offset
     *
     * Generated from protobuf field <code>uint64 Timestamp = 8;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->Timestamp = $var;

        return $this;
    }

    /**
     * Sig of this msg
     *
     * Generated from protobuf field <code>bytes Signature = 9;</code>
     * @return string
     */
    public function getSignature()
    {
        return $this->Signature;
    }

    /**
     * Sig of this msg
     *
     * Generated from protobuf field <code>bytes Signature = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkString($var, False);
        $this->Signature = $var;

        return $this;
    }

}

