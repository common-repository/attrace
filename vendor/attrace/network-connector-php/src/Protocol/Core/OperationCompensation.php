<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protocol.proto

namespace Attrace\Connector\Protocol\Core;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Compact
 *
 * Generated from protobuf message <code>attrace.connector.protocol.core.OperationCompensation</code>
 */
class OperationCompensation extends \Google\Protobuf\Internal\Message
{
    /**
     * Who receives the compensation, a member of the agreement.
     * Maps to the index (0-based) in the immutable CreateAgreement.Parties.
     *
     * Generated from protobuf field <code>uint32 Beneficiary = 1;</code>
     */
    protected $Beneficiary = 0;
    /**
     * Encoded as bigint big endian
     *  + ATTR: would saved as ACES values (default 18 decimal supported)
     *
     * Generated from protobuf field <code>bytes Value = 2;</code>
     */
    protected $Value = '';
    /**
     * Deprecated. Keep this field to avoid breaking when validating block.
     * In new flow, the value is always ATTR value. Old data still have Currency values.
     *
     * Generated from protobuf field <code>uint32 Currency = 3;</code>
     */
    protected $Currency = 0;
    /**
     * Encoded as bigint big endian. Store the original value defined in the contract.
     * Values are multiplied with 10^10, so they keep 9 digits correct.
     *
     * Generated from protobuf field <code>bytes ConversionValue = 4;</code>
     */
    protected $ConversionValue = '';
    /**
     * 1=USD, 2=EUR, ... See currency.go#L21
     *
     * Generated from protobuf field <code>uint32 ConversionCurrency = 5;</code>
     */
    protected $ConversionCurrency = 0;
    /**
     * Conversion rate from ConversionValue to ATTR token. Encoded as bigint big endian as ACES values (6 decimal supported)
     *  Ref: https://gitlab.com/attrace/docs/-/blob/develop/docs/guides/token-rates.md
     *
     * Generated from protobuf field <code>bytes ConversionRate = 6;</code>
     */
    protected $ConversionRate = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $Beneficiary
     *           Who receives the compensation, a member of the agreement.
     *           Maps to the index (0-based) in the immutable CreateAgreement.Parties.
     *     @type string $Value
     *           Encoded as bigint big endian
     *            + ATTR: would saved as ACES values (default 18 decimal supported)
     *     @type int $Currency
     *           Deprecated. Keep this field to avoid breaking when validating block.
     *           In new flow, the value is always ATTR value. Old data still have Currency values.
     *     @type string $ConversionValue
     *           Encoded as bigint big endian. Store the original value defined in the contract.
     *           Values are multiplied with 10^10, so they keep 9 digits correct.
     *     @type int $ConversionCurrency
     *           1=USD, 2=EUR, ... See currency.go#L21
     *     @type string $ConversionRate
     *           Conversion rate from ConversionValue to ATTR token. Encoded as bigint big endian as ACES values (6 decimal supported)
     *            Ref: https://gitlab.com/attrace/docs/-/blob/develop/docs/guides/token-rates.md
     * }
     */
    public function __construct($data = NULL) {
        \Attrace\Connector\Protocol\GPBMetadata\Protocol::initOnce();
        parent::__construct($data);
    }

    /**
     * Who receives the compensation, a member of the agreement.
     * Maps to the index (0-based) in the immutable CreateAgreement.Parties.
     *
     * Generated from protobuf field <code>uint32 Beneficiary = 1;</code>
     * @return int
     */
    public function getBeneficiary()
    {
        return $this->Beneficiary;
    }

    /**
     * Who receives the compensation, a member of the agreement.
     * Maps to the index (0-based) in the immutable CreateAgreement.Parties.
     *
     * Generated from protobuf field <code>uint32 Beneficiary = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setBeneficiary($var)
    {
        GPBUtil::checkUint32($var);
        $this->Beneficiary = $var;

        return $this;
    }

    /**
     * Encoded as bigint big endian
     *  + ATTR: would saved as ACES values (default 18 decimal supported)
     *
     * Generated from protobuf field <code>bytes Value = 2;</code>
     * @return string
     */
    public function getValue()
    {
        return $this->Value;
    }

    /**
     * Encoded as bigint big endian
     *  + ATTR: would saved as ACES values (default 18 decimal supported)
     *
     * Generated from protobuf field <code>bytes Value = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setValue($var)
    {
        GPBUtil::checkString($var, False);
        $this->Value = $var;

        return $this;
    }

    /**
     * Deprecated. Keep this field to avoid breaking when validating block.
     * In new flow, the value is always ATTR value. Old data still have Currency values.
     *
     * Generated from protobuf field <code>uint32 Currency = 3;</code>
     * @return int
     */
    public function getCurrency()
    {
        return $this->Currency;
    }

    /**
     * Deprecated. Keep this field to avoid breaking when validating block.
     * In new flow, the value is always ATTR value. Old data still have Currency values.
     *
     * Generated from protobuf field <code>uint32 Currency = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkUint32($var);
        $this->Currency = $var;

        return $this;
    }

    /**
     * Encoded as bigint big endian. Store the original value defined in the contract.
     * Values are multiplied with 10^10, so they keep 9 digits correct.
     *
     * Generated from protobuf field <code>bytes ConversionValue = 4;</code>
     * @return string
     */
    public function getConversionValue()
    {
        return $this->ConversionValue;
    }

    /**
     * Encoded as bigint big endian. Store the original value defined in the contract.
     * Values are multiplied with 10^10, so they keep 9 digits correct.
     *
     * Generated from protobuf field <code>bytes ConversionValue = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setConversionValue($var)
    {
        GPBUtil::checkString($var, False);
        $this->ConversionValue = $var;

        return $this;
    }

    /**
     * 1=USD, 2=EUR, ... See currency.go#L21
     *
     * Generated from protobuf field <code>uint32 ConversionCurrency = 5;</code>
     * @return int
     */
    public function getConversionCurrency()
    {
        return $this->ConversionCurrency;
    }

    /**
     * 1=USD, 2=EUR, ... See currency.go#L21
     *
     * Generated from protobuf field <code>uint32 ConversionCurrency = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setConversionCurrency($var)
    {
        GPBUtil::checkUint32($var);
        $this->ConversionCurrency = $var;

        return $this;
    }

    /**
     * Conversion rate from ConversionValue to ATTR token. Encoded as bigint big endian as ACES values (6 decimal supported)
     *  Ref: https://gitlab.com/attrace/docs/-/blob/develop/docs/guides/token-rates.md
     *
     * Generated from protobuf field <code>bytes ConversionRate = 6;</code>
     * @return string
     */
    public function getConversionRate()
    {
        return $this->ConversionRate;
    }

    /**
     * Conversion rate from ConversionValue to ATTR token. Encoded as bigint big endian as ACES values (6 decimal supported)
     *  Ref: https://gitlab.com/attrace/docs/-/blob/develop/docs/guides/token-rates.md
     *
     * Generated from protobuf field <code>bytes ConversionRate = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setConversionRate($var)
    {
        GPBUtil::checkString($var, False);
        $this->ConversionRate = $var;

        return $this;
    }

}

