<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protocol.proto

namespace Attrace\Connector\Protocol\Core;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>attrace.connector.protocol.core.DelegatedOperation</code>
 */
class DelegatedOperation extends \Google\Protobuf\Internal\Message
{
    /**
     * Operation to be executed by delegatee
     *
     * Generated from protobuf field <code>.attrace.connector.protocol.core.Operation Operation = 1;</code>
     */
    protected $Operation = null;
    /**
     * Owner address of operation. The one who sign the DelegatedOperation. This could be account address or operational key address.
     *
     * Generated from protobuf field <code>bytes Account = 2;</code>
     */
    protected $Account = '';
    /**
     * Address of delegatee
     *
     * Generated from protobuf field <code>bytes Delegatee = 3;</code>
     */
    protected $Delegatee = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Attrace\Connector\Protocol\Core\Operation $Operation
     *           Operation to be executed by delegatee
     *     @type string $Account
     *           Owner address of operation. The one who sign the DelegatedOperation. This could be account address or operational key address.
     *     @type string $Delegatee
     *           Address of delegatee
     * }
     */
    public function __construct($data = NULL) {
        \Attrace\Connector\Protocol\GPBMetadata\Protocol::initOnce();
        parent::__construct($data);
    }

    /**
     * Operation to be executed by delegatee
     *
     * Generated from protobuf field <code>.attrace.connector.protocol.core.Operation Operation = 1;</code>
     * @return \Attrace\Connector\Protocol\Core\Operation
     */
    public function getOperation()
    {
        return isset($this->Operation) ? $this->Operation : null;
    }

    public function hasOperation()
    {
        return isset($this->Operation);
    }

    public function clearOperation()
    {
        unset($this->Operation);
    }

    /**
     * Operation to be executed by delegatee
     *
     * Generated from protobuf field <code>.attrace.connector.protocol.core.Operation Operation = 1;</code>
     * @param \Attrace\Connector\Protocol\Core\Operation $var
     * @return $this
     */
    public function setOperation($var)
    {
        GPBUtil::checkMessage($var, \Attrace\Connector\Protocol\Core\Operation::class);
        $this->Operation = $var;

        return $this;
    }

    /**
     * Owner address of operation. The one who sign the DelegatedOperation. This could be account address or operational key address.
     *
     * Generated from protobuf field <code>bytes Account = 2;</code>
     * @return string
     */
    public function getAccount()
    {
        return $this->Account;
    }

    /**
     * Owner address of operation. The one who sign the DelegatedOperation. This could be account address or operational key address.
     *
     * Generated from protobuf field <code>bytes Account = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAccount($var)
    {
        GPBUtil::checkString($var, False);
        $this->Account = $var;

        return $this;
    }

    /**
     * Address of delegatee
     *
     * Generated from protobuf field <code>bytes Delegatee = 3;</code>
     * @return string
     */
    public function getDelegatee()
    {
        return $this->Delegatee;
    }

    /**
     * Address of delegatee
     *
     * Generated from protobuf field <code>bytes Delegatee = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDelegatee($var)
    {
        GPBUtil::checkString($var, False);
        $this->Delegatee = $var;

        return $this;
    }

}

